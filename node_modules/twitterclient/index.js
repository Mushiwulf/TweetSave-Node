var https = require('https');

var TwitterClient = (function () {
    function TwitterClient(config) {
        this.key = config.key;
        this.secret = config.secret;
    }

    function fetchResults(term,token,callBack){
    	var options = {
	    host: 'api.twitter.com',
	    path: '/1.1/search/tweets.json?q=' + encodeURIComponent(term),
	    method: 'GET',
	    headers: {'Authorization': 'Bearer ' + token}
	  };
	  var req = https.request(options, function(response) {
	    var str = '';
	    response.on('data', function (chunk) {
	      str += chunk;
	    });

	    response.on('end', function () {
            callBack(JSON.parse(str));
	    });
	  });

	  req.end();

    }

	function getToken(token,callback){
        console.log("get token");
	  var options = {
	    host: 'api.twitter.com',
	    path: '/oauth2/token',
	    method: 'POST',
	    headers: {'Authorization': 'Basic ' + token,
	   'Content-Type': 'application/x-www-form-urlencoded'}
	  };

	  var req = https.request(options, function(response) {
	    var str = ''
	    response.on('data', function (chunk) {
	      str += chunk;
	    });

	    response.on('end', function () {
	      callback(JSON.parse(str));
	    });
	  });

	  req.write("grant_type=client_credentials");
	  req.end();
	}

    TwitterClient.prototype.search = function (term,callBack) {
        var client = this;
    	if(this.accessToken == undefined){
    		var credential = new Buffer(this.key + ":" + this.secret).toString('base64');
    		getToken(credential,function(data){
                client.accessToken = data.access_token;
    			fetchResults(term,client.accessToken,callBack);
    		})
    		return;
    	}

    	fetchResults(term,this.accessToken,callBack);
	};

    return TwitterClient;

})();

exports.Client = TwitterClient;

